import org.junit.jupiter.api.Test;
import ru.codebattle.client.api.GameBoard;
import ru.codebattle.client.api.SnakeAction;
import ru.codebattle.client.solver.SmartStrategy;

public class SmartStrategyTest {

    @Test
    void applyNpe() {
        SmartStrategy strategy = new SmartStrategy();
        GameBoard board = new GameBoard("☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼\n" +
                "☼☼            ☼           ☼ ×───♣ ☼\n" +
                "☼☼   ☼   ☼      ☼     ☼ ☼    ☼    ☼\n" +
                "☼☼   ☼      ☼      ☼              ☼\n" +
                "☼#    ☼  ☼    ☼  ☼   ☼    ☼   ☼   ☼\n" +
                "☼☼        ☼    ☼    ☼    ☼   ☼    ☼\n" +
                "☼☼   ☼ ☼        ☼  ☼    ☼         ☼\n" +
                "☼☼      ☼   ☼          ☼   ☼    ® ☼\n" +
                "☼☼   ☼   ☼        ☼       ☼   ☼ ○ ☼\n" +
                "☼#   ☼☼       ☼      ☼       ☼    ☼\n" +
                "☼☼   ☼     ☼  ○☼    ☼   ☼   ☼    ○☼\n" +
                "☼☼      ☼   ☼   ☼      ☼   ☼      ☼\n" +
                "☼☼   ☼           ☼ ○  ☼           ☼\n" +
                "☼☼        ☼   ☼          ☼    ☼   ☼\n" +
                "☼#   ☼☼    ☼ ╓ ☼ ○ ☼    ☼    ☼    ☼\n" +
                "☼☼    ●☼    ☼▼      ☼ ○     ☼     ☼\n" +
                "☼☼    ○   ○  ☼ ○ ☼   ☼   ○☼       ☼\n" +
                "☼☼     ® ☼        ☼   ☼    ☼      ☼\n" +
                "☼☼     ☼    ○  ☼      ○     ☼     ☼\n" +
                "☼#    ☼    ☼    ☼   ☼   ☼         ☼\n" +
                "☼☼   ☼    ☼   ○  ☼   ☼ ○          ☼\n" +
                "☼☼           ☼    ☼       ☼       ☼\n" +
                "☼☼      ☼   ☼  ®       ☼   ☼    ○ ☼\n" +
                "☼☼     ☼   ☼   ☼  ○ ☼   ☼  ®      ☼\n" +
                "☼#    ☼       ☼          ☼   ®    ☼\n" +
                "☼☼   ☼   ☼     $ ☼    ☼   ☼     ® ☼\n" +
                "☼☼ ○    ☼   ☼     ☼    ☼   ☼      ☼\n" +
                "☼☼         ☼    ☼  ☼         ☼    ☼\n" +
                "☼☼    ☼   ☼    ☼®              ☼  ☼\n" +
                "☼#   ☼   ☼    ☼         ☼   ☼     ☼\n" +
                "☼☼              ☼   ☼     ☼    $  ☼\n" +
                "☼☼  ☼   ☼  ☼    ☼○   ®☼     $   ○ ☼\n" +
                "☼☼    ☼   ☼☼  ☼         ® ☼  ☼  ☼ ☼\n" +
                "☼☼                    ®○    $     ☼\n" +
                "☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼");
        SnakeAction result = strategy.apply(board);
        System.out.println(result);
    }

    @Test
    void applyOutOfIndex1() {
        SmartStrategy strategy = new SmartStrategy();
        GameBoard board = new GameBoard("☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼\n" +
                "☼☼            ☼  ○       ®☼   ○   ☼\n" +
                "☼☼   ☼   ☼      ☼     ☼ ☼    ☼    ☼\n" +
                "☼☼   ☼      ☼      ☼              ☼\n" +
                "☼#    ☼  ☼○   ☼  ☼   ☼    ☼   ☼   ☼\n" +
                "☼☼        ☼    ☼    ☼    ☼   ☼    ☼\n" +
                "☼☼   ☼ ☼    ○   ☼  ☼  ○ ☼         ☼\n" +
                "☼☼      ☼   ☼          ☼   ☼      ☼\n" +
                "☼☼   ☼   ☼      ○ ☼       ☼   ☼○  ☼\n" +
                "☼#   ☼☼       ☼      ☼® ○    ☼    ☼\n" +
                "☼☼   ☼     ☼   ☼    ☼   ☼   ☼®    ☼\n" +
                "☼☼      ☼   ☼   ☼      ☼   ☼  ○   ☼\n" +
                "☼☼   ☼           ☼ ○  ☼        ♣  ☼\n" +
                "☼☼        ☼   ☼         ○☼   ○☼│  ☼\n" +
                "☼#   ☼☼    ☼   ☼   ☼    ☼    ☼┌┘  ☼\n" +
                "☼☼  ®  ☼  ○®☼       ☼ ○     ☼┌┘   ☼\n" +
                "☼☼           ☼   ☼   ☼   ○☼  │    ☼\n" +
                "☼☼       ☼○     ® ☼   ☼    ☼ │    ☼\n" +
                "☼☼     ☼       ☼            ☼¤    ☼\n" +
                "☼#    ☼    ☼    ☼   ☼   ☼         ☼\n" +
                "☼☼   ☼    ☼      ☼   ☼     ●      ☼\n" +
                "☼☼           ☼    ☼       ☼    ●  ☼\n" +
                "☼☼      ☼   ☼          ☼   ☼      ☼\n" +
                "☼☼®    ☼   ☼   ☼    ☼   ☼         ☼\n" +
                "☼#    ☼       ☼          ☼     ®  ☼\n" +
                "☼☼   ☼   ☼       ☼    ☼   ☼   ®   ☼\n" +
                "☼☼○     ☼   ☼     ☼○   ☼   ☼      ☼\n" +
                "☼☼         ☼    ☼  ☼         ☼●®  ☼\n" +
                "☼☼    ☼   ☼    ☼               ☼  ☼\n" +
                "☼#   ☼   ☼    ☼         ☼   ☼     ☼\n" +
                "☼☼              ☼   ☼     ☼    $  ☼\n" +
                "☼☼  ☼   ☼  ☼    ☼     ☼ ×──♣$     ☼\n" +
                "☼☼    ☼   ☼☼  ☼           ☼  ☼  ☼ ☼\n" +
                "☼☼                            ○  ╓☼\n" +
                "☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☻☼");
        SnakeAction result = strategy.apply(board);
        System.out.println(result);
    }

    @Test
    void applyBadChoice1() {
        SmartStrategy strategy = new SmartStrategy();
        GameBoard board = new GameBoard("☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼\n" +
                "☼☼            ☼  ○       ®☼   ○   ☼\n" +
                "☼☼   ☼   ☼      ☼     ☼ ☼    ☼    ☼\n" +
                "☼☼   ☼      ☼      ☼              ☼\n" +
                "☼#    ☼  ☼○   ☼  ☼   ☼    ☼   ☼   ☼\n" +
                "☼☼        ☼    ☼    ☼    ☼   ☼    ☼\n" +
                "☼☼   ☼ ☼    ○   ☼  ☼  ○ ☼         ☼\n" +
                "☼☼      ☼   ☼          ☼   ☼      ☼\n" +
                "☼☼   ☼   ☼      ○ ☼       ☼   ☼○  ☼\n" +
                "☼#   ☼☼       ☼      ☼® ○    ☼    ☼\n" +
                "☼☼   ☼     ☼   ☼    ☼   ☼   ☼®    ☼\n" +
                "☼☼      ☼   ☼   ☼      ☼   ☼  ○   ☼\n" +
                "☼☼   ☼           ☼ ○  ☼        ♣  ☼\n" +
                "☼☼        ☼   ☼         ○☼   ○☼│  ☼\n" +
                "☼#   ☼☼    ☼   ☼   ☼    ☼    ☼┌┘  ☼\n" +
                "☼☼  ®  ☼  ○®☼       ☼ ○     ☼┌┘   ☼\n" +
                "☼☼           ☼   ☼   ☼   ○☼  │    ☼\n" +
                "☼☼       ☼○     ® ☼   ☼    ☼ │    ☼\n" +
                "☼☼     ☼       ☼            ☼¤    ☼\n" +
                "☼#    ☼    ☼    ☼   ☼   ☼         ☼\n" +
                "☼☼   ☼    ☼      ☼   ☼     ●      ☼\n" +
                "☼☼           ☼    ☼       ☼    ●  ☼\n" +
                "☼☼      ☼   ☼          ☼   ☼      ☼\n" +
                "☼☼®    ☼   ☼   ☼    ☼   ☼         ☼\n" +
                "☼#    ☼       ☼          ☼     ®  ☼\n" +
                "☼☼   ☼   ☼       ☼    ☼   ☼   ®   ☼\n" +
                "☼☼○     ☼   ☼     ☼○   ☼   ☼      ☼\n" +
                "☼☼         ☼    ☼  ☼         ☼●®  ☼\n" +
                "☼☼    ☼   ☼    ☼               ☼  ☼\n" +
                "☼#   ☼   ☼    ☼         ☼   ☼     ☼\n" +
                "☼☼              ☼   ☼     ☼    $  ☼\n" +
                "☼☼  ☼   ☼  ☼    ☼     ☼ ×──♣$    ╓☼\n" +
                "☼☼    ☼   ☼☼  ☼           ☼  ☼  ☼║☼\n" +
                "☼☼                            ○  ▼☼\n" +
                "☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼");
        SnakeAction result = strategy.apply(board);
        System.out.println(result);
    }

    @Test
    void applyBadChoice2() {
        SmartStrategy strategy = new SmartStrategy();
        GameBoard board = new GameBoard("☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼\n" +
                "☼☼            ☼  ○       ®☼   ○   ☼\n" +
                "☼☼   ☼   ☼      ☼     ☼ ☼    ☼    ☼\n" +
                "☼☼   ☼      ☼      ☼              ☼\n" +
                "☼#    ☼  ☼○   ☼  ☼   ☼    ☼   ☼   ☼\n" +
                "☼☼        ☼    ☼    ☼    ☼   ☼    ☼\n" +
                "☼☼   ☼ ☼    ○   ☼  ☼  ○ ☼         ☼\n" +
                "☼☼      ☼   ☼          ☼   ☼      ☼\n" +
                "☼☼   ☼   ☼      ○ ☼       ☼   ☼○  ☼\n" +
                "☼#   ☼☼       ☼      ☼® ○    ☼    ☼\n" +
                "☼☼   ☼     ☼   ☼    ☼   ☼   ☼®    ☼\n" +
                "☼☼      ☼   ☼   ☼      ☼   ☼  ○   ☼\n" +
                "☼☼   ☼           ☼ ○  ☼        ♣  ☼\n" +
                "☼☼        ☼   ☼         ○☼   ○☼│  ☼\n" +
                "☼#   ☼☼    ☼   ☼   ☼    ☼    ☼┌┘  ☼\n" +
                "☼☼  ®  ☼  ○®☼       ☼ ○     ☼┌┘   ☼\n" +
                "☼☼           ☼   ☼   ☼   ○☼  │    ☼\n" +
                "☼☼       ☼○     ® ☼   ☼    ☼ │    ☼\n" +
                "☼☼     ☼       ☼            ☼¤    ☼\n" +
                "☼#    ☼    ☼    ☼   ☼   ☼         ☼\n" +
                "☼☼   ☼    ☼      ☼   ☼     ●      ☼\n" +
                "☼☼           ☼    ☼       ☼    ●  ☼\n" +
                "☼☼      ☼   ☼          ☼   ☼      ☼\n" +
                "☼☼®    ☼   ☼   ☼    ☼   ☼         ☼\n" +
                "☼#    ☼       ☼          ☼     ®  ☼\n" +
                "☼☼   ☼   ☼       ☼    ☼   ☼   ®   ☼\n" +
                "☼☼○     ☼   ☼     ☼○   ☼   ☼      ☼\n" +
                "☼☼         ☼    ☼  ☼         ☼●®  ☼\n" +
                "☼☼    ☼   ☼    ☼               ☼  ☼\n" +
                "☼#   ☼   ☼    ☼         ☼   ☼     ☼\n" +
                "☼☼              ☼   ☼     ☼    $  ☼\n" +
                "☼☼  ☼   ☼  ☼    ☼     ☼ ×──♣$     ☼\n" +
                "☼☼    ☼   ☼☼  ☼           ☼  ☼  ☼ ☼\n" +
                "☼☼                            ○ ╘►☼\n" +
                "☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼");
        SnakeAction result = strategy.apply(board);
        System.out.println(result);
    }

    @Test
    void applyBadChoice3() {
        SmartStrategy strategy = new SmartStrategy();
        GameBoard board = new GameBoard("☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼\n" +
                "☼☼    ╘►      ☼  ®  ®     ☼       ☼\n" +
                "☼☼   ☼   ☼  ®   ☼     ☼ ☼    ☼    ☼\n" +
                "☼☼   ☼ ○    ☼      ☼  ®           ☼\n" +
                "☼#    ☼  ☼    ☼  ☼   ☼    ☼   ☼   ☼\n" +
                "☼☼        ☼    ☼    ☼    ☼   ☼    ☼\n" +
                "☼☼   ☼ ☼        ☼  ☼    ☼$        ☼\n" +
                "☼☼      ☼ ×♣☼          ☼   ☼      ☼\n" +
                "☼☼   ☼   ☼        ☼     ® ☼○  ☼   ☼\n" +
                "☼#   ☼☼       ☼      ☼       ☼    ☼\n" +
                "☼☼   ☼     ☼   ☼    ☼   ☼   ☼     ☼\n" +
                "☼☼      ☼   ☼   ☼      ☼   ☼      ☼\n" +
                "☼☼   ☼           ☼ ○  ☼          ®☼\n" +
                "☼☼        ☼   ☼          ☼    ☼   ☼\n" +
                "☼#   ☼☼    ☼   ☼ ○ ☼    ☼    ☼    ☼\n" +
                "☼☼     ☼    ☼     ○ ☼ ○     ☼     ☼\n" +
                "☼☼           ☼ ○ ☼   ☼   ○☼       ☼\n" +
                "☼☼       ☼        ☼   ☼    ☼      ☼\n" +
                "☼☼     ☼    ○  ☼      ○     ☼     ☼\n" +
                "☼#    ☼    ☼    ☼   ☼   ☼         ☼\n" +
                "☼☼   ☼    ☼   ○  ☼   ☼ ○          ☼\n" +
                "☼☼           ☼    ☼       ☼   ○   ☼\n" +
                "☼☼      ☼   ☼          ☼   ☼  ○   ☼\n" +
                "☼☼     ☼   ☼   ☼ ●○ ☼   ☼         ☼\n" +
                "☼#    ☼ ×♣    ☼®         ☼        ☼\n" +
                "☼☼   ☼   ☼       ☼    ☼   ☼       ☼\n" +
                "☼☼      ☼   ☼     ☼    ☼   ☼      ☼\n" +
                "☼☼         ☼    ☼  ☼ ○       ☼    ☼\n" +
                "☼☼    ☼   ☼    ☼      ○        ☼ ®☼\n" +
                "☼#   ☼   ☼    ☼      ®  ☼   ☼     ☼\n" +
                "☼☼              ☼   ☼     ☼    $  ☼\n" +
                "☼☼  ☼   ☼ ○☼    ☼     ☼®    $     ☼\n" +
                "☼☼    ☼   ☼☼  ☼           ☼  ☼  ☼ ☼\n" +
                "☼☼                                ☼\n" +
                "☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼");
        SnakeAction result = strategy.apply(board);
        System.out.println(result);
    }

    @Test
    void applyNpe1() {
        SmartStrategy strategy = new SmartStrategy();
        GameBoard board = new GameBoard("☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼\n" +
                "☼☼            ☼           ☼    ●  ☼\n" +
                "☼☼   ☼   ☼      ☼     ☼ ☼    ☼    ☼\n" +
                "☼☼   ☼      ☼      ☼       æ      ☼\n" +
                "☼#    ☼  ☼    ☼ ®☼   ☼    ☼│  ☼   ☼\n" +
                "☼☼        ☼    ☼    ☼    ☼○│ ☼    ☼\n" +
                "☼☼   ☼ ☼        ☼  ☼    ☼  └☺     ☼\n" +
                "☼☼      ☼   ☼          ☼   ☼║     ☼\n" +
                "☼☼   ☼   ☼        ☼       ☼ ║ ☼   ☼\n" +
                "☼#   ☼☼       ☼      ☼    ╔═╝☼    ☼\n" +
                "☼☼   ☼     ☼   ☼    ☼   ☼ ║ ☼    ○☼\n" +
                "☼☼      ☼   ☼   ☼      ☼  ║☼      ☼\n" +
                "☼☼   ☼           ☼    ☼╔══╝       ☼\n" +
                "☼☼        ☼   ☼        ╙●☼    ☼   ☼\n" +
                "☼#   ☼☼®   ☼   ☼   ☼    ☼    ☼    ☼\n" +
                "☼☼     ☼    ☼       ☼       ☼     ☼\n" +
                "☼☼       ○   ☼  ®☼   ☼    ☼       ☼\n" +
                "☼☼       ☼        ☼   ☼    ☼      ☼\n" +
                "☼☼     ☼       ☼            ☼     ☼\n" +
                "☼#    ☼  ○ ☼    ☼   ☼   ☼         ☼\n" +
                "☼☼   ☼    ☼      ☼   ☼      ®     ☼\n" +
                "☼☼           ☼    ☼       ☼  ○    ☼\n" +
                "☼☼      ☼   ☼          ☼   ☼      ☼\n" +
                "☼☼     ☼   ☼   ☼  ○ ☼   ☼         ☼\n" +
                "☼#®®  ☼       ☼      ○   ☼        ☼\n" +
                "☼☼   ☼   ☼       ☼    ☼  ○☼       ☼\n" +
                "☼☼      ☼   ☼  ®  ☼    ☼   ☼      ☼\n" +
                "☼☼         ☼ ®  ☼  ☼   ○     ☼    ☼\n" +
                "☼☼®  ●☼   ☼   ®☼               ☼  ☼\n" +
                "☼#   ☼   ☼    ☼  ®      ☼   ☼®    ☼\n" +
                "☼☼   ○ ○        ☼●  ☼     ☼    $  ☼\n" +
                "☼☼  ☼  ○☼  ☼    ☼ ®   ☼     $  ®  ☼\n" +
                "☼☼    ☼   ☼☼  ☼        ○  ☼  ☼  ☼ ☼\n" +
                "☼☼         ○        ®             ☼\n" +
                "☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼");
        SnakeAction result = strategy.apply(board);
        System.out.println(result);
    }

    @Test
    void applyBadChoice4() {
        SmartStrategy strategy = new SmartStrategy();
        GameBoard board = new GameBoard("☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼\n" +
                "☼☼            ☼           ☼®      ☼\n" +
                "☼☼   ☼   ☼      ☼     ☼ ☼    ☼    ☼\n" +
                "☼☼   ☼      ☼®     ☼              ☼\n" +
                "☼#    ☼  ☼    ☼  ☼   ☼    ☼ ® ☼   ☼\n" +
                "☼☼        ☼    ☼    ☼    ☼   ☼    ☼\n" +
                "☼☼   ☼ ☼        ☼  ☼ ®  ☼         ☼\n" +
                "☼☼      ☼   ☼          ☼   ☼      ☼\n" +
                "☼☼   ☼   ☼        ☼       ☼   ☼   ☼\n" +
                "☼#   ☼☼       ☼      ☼       ☼    ☼\n" +
                "☼☼   ☼     ☼   ☼ ®  ☼   ☼   ☼     ☼\n" +
                "☼☼      ☼   ☼   ☼      ☼ ® ☼      ☼\n" +
                "☼☼   ☼           ☼    ☼           ☼\n" +
                "☼☼        ☼   ☼          ☼    ☼   ☼\n" +
                "☼#   ☼☼    ☼   ☼   ☼    ☼    ☼    ☼\n" +
                "☼☼ $   ☼    ☼       ☼       ☼     ☼\n" +
                "☼☼           ☼ ○ ☼   ☼   ○☼       ☼\n" +
                "☼☼       ☼        ☼   ☼  ® ☼      ☼\n" +
                "☼☼     ☼       ☼      ○     ☼     ☼\n" +
                "☼#    ☼    ☼    ☼   ☼   ☼   ®     ☼\n" +
                "☼☼   ☼    ☼      ☼○  ☼ ○          ☼\n" +
                "☼☼           ☼    ☼       ☼       ☼\n" +
                "☼☼  ®   ☼   ☼    ○     ☼   ☼      ☼\n" +
                "☼☼     ☼   ☼   ☼  ○ ☼   ☼      ®  ☼\n" +
                "☼#    ☼○      ☼          ☼        ☼\n" +
                "☼☼   ☼  ®☼       ☼    ☼   ☼     ● ☼\n" +
                "☼☼      ☼   ☼    ®☼    ☼   ☼      ☼\n" +
                "☼☼      ○  ☼    ☼  ☼         ☼    ☼\n" +
                "☼☼    ☼   ☼ ○  ☼               ☼  ☼\n" +
                "☼#   ☼®  ☼    ☼         ☼   ☼    ╓☼\n" +
                "☼☼    ˄         ☼ ○ ☼     ☼ ◄════╝☼\n" +
                "☼☼● ☼ └┐☼  ☼    ☼     ☼     $     ☼\n" +
                "☼☼    ☼└ö ☼☼  ☼           ☼  ☼ ®☼ ☼\n" +
                "☼☼   ®                            ☼\n" +
                "☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼");
        SnakeAction result = strategy.apply(board);
        System.out.println(result);
    }
}